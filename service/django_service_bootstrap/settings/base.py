"""
Django settings for django_service_bootstrap project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
import sys
from pathlib import Path
from pythonjsonlogger import jsonlogger
from blink_logging_metrics.logging import logging_filters
from blink_messaging import BlinkTopic
import logging

_logger = logging.getLogger(__name__)

BASE_DIR = Path(__file__).resolve().parent.parent
ALLOWED_HOSTS = ["*"]

# Deployment Checklist
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "45y=@9t%g)7+@%v&hv@%&7t7+f-4t^8cw+2ja@wzd!!fr)f9%k"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# define the environment
ENVIRONMENT = os.environ.get("ENVIRONMENT")

# check the mode the app is running in
# when using runserver, Django spins up a second process locally for auto-reload, so skip the one without RUN_MAIN
IS_RUN_SERVER = len(sys.argv) > 1 and sys.argv[1] == "runserver" and os.environ.get("RUN_MAIN", None) == "true"
IS_GUNICORN = len(sys.argv) > 0 and "gunicorn" in sys.argv[0]
IS_API_NODE = IS_RUN_SERVER or IS_GUNICORN


ALL_VAULT_SECRETS_LOADED = False
DB_SECRETS = None

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "drf_yasg",  # Yet-Another-Swagger-Generator
    "django_extensions",
]

SERVICE_APPS = [
    # root of the django project
    "django_service_bootstrap",
    # main service logic and data model
    "core",
    # HTTP API layer
    "api",
    # app that consumes messages using SQS
    "message_consumer",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + SERVICE_APPS

MIDDLEWARE = [
    # must be first, to ensure all logs have a blink_correlation_id
    "blink_logging_metrics.logging.middleware.RequestCorrelationIdMiddleware",
    # should be at/near the top, so that the timing cover all middleware as well
    "blink_logging_metrics.logging.middleware.RequestLoggingMiddleware",
    # should be at/near the top, so that any middleware DB access is tracked
    "blink_logging_metrics.logging.middleware.RequestQueryCountMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
]

AUTHENTICATION_BACKENDS = ("common_lib.cached_basic_auth_model_backend.CachedBasicAuthModelBackend",)

AUTH_USER_MODEL = "core.User"

# use cookies, instead of the DB, for managing user sessions
SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
SESSION_COOKIE_HTTPONLY = True  # ensure cookies can't be read by javascript
SESSION_COOKIE_AGE = 86400  # 1-day in seconds

ROOT_URLCONF = "django_service_bootstrap.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_service_bootstrap.wsgi.application"

# blink_logging_metrics middleware settings
HTTP_LOG_HEADERS = True  # whether to log request/response headers
HTTP_MAX_LOG_PAYLOAD = 2000  # payloads larger than this many characters will be truncated when logging responses
HTTP_IGNORED_LOG_PATHS = ["/healthcheck/"]  # do not write out standard logs or metrics for these paths
QUERY_COUNT_LOG_QUERIES = False  # if true, log every individual query run, and not just totals
REQUEST_QUERY_COUNT_MAX_COUNT = 20  # log a warning if any request uses more counts than this

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "",
        "USER": "",
        "PASSWORD": "",
        "HOST": "",
        "PORT": "",
        "CONN_MAX_AGE": 600,
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static_collect")
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"

# Django Rest Framework Configuration
REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": "common_lib.django.drf.error_handling.global_drf_exception_handler",
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}

CACHED_BASIC_AUTH_MODEL_BACKEND = {"return_cached_user_object": False}

# logging
CB_FILTER = "django.utils.log.CallbackFilter"  # a filter that calls a function, and filters if it returns False
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {"standard": {"()": "logging.Formatter"}, "json": {"()": jsonlogger.JsonFormatter}},
    # filters can be used to both filter out some logs, as well as update or add to them
    "filters": {
        "add_blink_correlation_id": {"()": CB_FILTER, "callback": logging_filters.add_blink_correlation_id},
        "add_log_level": {"()": CB_FILTER, "callback": logging_filters.add_log_level},
        "ignore_if_warning_level": {"()": CB_FILTER, "callback": logging_filters.ignore_if_warning_level},
        "ignore_paths": {"()": logging_filters.IgnorePathsFilter, "ignore_paths": []},
    },
    # destinations you can send logs to
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
            "filters": [
                "ignore_if_warning_level",
                "ignore_paths",
                "add_log_level",
                "add_blink_correlation_id",
            ],
            "stream": "ext://sys.stdout",
            "level": "INFO",
        },
        "console_error": {
            "class": "logging.StreamHandler",
            "formatter": "json",
            "filters": [
                "add_log_level",
                "add_blink_correlation_id",
            ],
            "stream": "ext://sys.stderr",
            "level": "WARNING",
        },
        "null": {"class": "logging.NullHandler"},
    },
    # # default for all logs not covered by other loggers below
    "root": {"level": "INFO", "handlers": ["console", "console_error"]},
    # logs have a hierarchy, based on the log name, where periods separate the levels.  you can update what handlers to
    # send each log type to, and for what level (the specified level, and anything higher).
    # propagate determines if the log should also be handled by loggers at a higher level.
    "loggers": {
        # filter out most of the Django noise, since we log the important stuff ourselves
        "django": {"level": "ERROR", "handlers": ["console_error"], "propagate": False},
        # filter out any libraries that have noisy logs
        "transitions.core": {"level": "WARNING", "handlers": ["console_error"], "propagate": False},
    },
}

# metrics
METRICS = {
    "provider": "datadog",
    "namespace": "django_service_bootstrap",
    "statsd": {
        "hostname": None,
        "constant_tags": {
            "service": "django_service_bootstrap",
            # environment is set by the statsd service ('dev', 'staging' or 'production')
        },
    },
}

# topic configuration for message consumer
QUEUES_CONFIG = {
    "aws_endpoint_url": None,
    "visibility_timeout": 720,
    "create_topic": False,
    "topics": {
        "django_service_bootstrap_general_queue": {
            "name": "django-service-bootstrap-general",
            "processor": "sqs",
            "is_fifo": False,
            "aws_region": "us-east-1",
            "is_mocked": False,
        },
        "django_service_bootstrap_general_queue_dlq": {
            "name": "django-service-bootstrap-general-dlq",
            "processor": "sqs",
            "is_fifo": False,
            "aws_region": "us-east-1",
            "is_mocked": False,
        },
    },
}
TOPIC_CONFIG = BlinkTopic.load_from_config(QUEUES_CONFIG)

# http clients
HTTP_CLIENTS = {
    "endpoints": {
        "foo": {
            "root_url": "",
            "default_timeout_seconds": 2.0,
            "auth": {"username": None, "password": None},
            "num_retries": 0,
            "mocked_transport": None,
        },
    },
}
